using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Euler_12
{
        //The sequence of triangle numbers is generated by adding the natural numbers.So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        //1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        //Let us list the factors of the first seven triangle numbers:

        // 1: 1
        // 3: 1,3
        // 6: 1,2,3,6
        //10: 1,2,5,10
        //15: 1,3,5,15
        //21: 1,3,7,21
        //28: 1,2,4,7,14,28
        //We can see that 28 is the first triangle number to have over five divisors.

        //What is the value of the first triangle number to have over five hundred divisors?
    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch clock = Stopwatch.StartNew();
            long n = 0;

            for (long sequence = 0; sequence < 1000000000; sequence++)
            {
                n = n + sequence;
                int numberofDivisors = Divisor(n);

                if (numberofDivisors > 500)
                {
                    clock.Stop();
                    Console.WriteLine(n);
                    Console.WriteLine("Solution took {0} ms", clock.ElapsedMilliseconds);
                    Console.ReadKey();
                    break;
                }
            }
        }

        //public static int Divisor2(long number)
        //{
        //    int numberOfDivisors = 0;
        //    for (long i = 1; i <= number; i++)
        //    {
        //        if ((number % i) == 0)
        //        {
        //            numberOfDivisors++;
        //        }
        //    }

        //    return numberOfDivisors;
        //}

        private static int Divisor(long number)
        {
            int numberOfDivisors = 0;
            long sqrt = (int)Math.Sqrt(number);

            for (int i = 1; i <= sqrt; i++)
            {
                if (number % i == 0)
                {
                    numberOfDivisors += 2;
                }
            }
            //Correction if the number is a perfect square
            if (sqrt * sqrt == number)
            {
                numberOfDivisors--;
            }

            return numberOfDivisors;
        }
    }


}
